generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Profile {
    id        String   @id @default(uuid())
    userId    String   @unique
    name      String
    imageUrl  String?
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    members  Member[]
    messages Message[]
    servers  Server[]  @relation("ServerCreator")
    bans     Ban[]
}

model Server {
    id         String   @id @default(uuid())
    name       String
    imageUrl   String?
    inviteCode String?  @unique
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    creatorId  String

    channels Channel[]
    members  Member[]
    creator  Profile   @relation("ServerCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    bans     Ban[]

    @@index([creatorId])
}

model Member {
    id        String     @id @default(uuid())
    role      MemberRole @default(GUEST)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    profileId String
    serverId  String

    profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    server  Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)

    messages Message[]

    // Conversations
    conversationsInitiated Conversation[] @relation("MemberOne")
    conversationsReceived  Conversation[] @relation("MemberTwo")

    // Direct messages this member sent
    directMessages DirectMessage[]

    @@index([profileId])
    @@index([serverId])
}

model Channel {
    id        String      @id @default(uuid())
    name      String
    type      ChannelType @default(TEXT)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    serverId  String

    server   Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)
    messages Message[]

    @@index([serverId])
}

model Message {
    id        String   @id @default(uuid())
    content   String   @db.Text
    fileUrl   String?  @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    deleted   Boolean  @default(false)
    memberId  String
    profileId String
    channelId String

    channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
    member  Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
    profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    @@index([memberId])
    @@index([channelId])
    @@index([profileId])
}

model Conversation {
    id String @id @default(uuid())

    memberOneId String
    memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

    memberTwoId String
    memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

    directMessages DirectMessage[]

    @@unique([memberOneId, memberTwoId])
    @@index([memberOneId])
    @@index([memberTwoId])
}

model DirectMessage {
    id        String   @id @default(uuid())
    content   String   @db.Text
    fileUrl   String?  @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    deleted   Boolean  @default(false)

    memberId String
    member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

    conversationId String
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    @@index([memberId])
    @@index([conversationId])
}

model Ban {
    id        String   @id @default(uuid())
    serverId  String
    profileId String
    createdAt DateTime @default(now())

    server  Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)
    profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    @@unique([serverId, profileId])
    @@index([serverId])
    @@index([profileId])
}

enum MemberRole {
    ADMIN
    MODERATOR
    GUEST
}

enum ChannelType {
    TEXT
    AUDIO
    VIDEO
}
